name: Release public Lambda layer

on:
  workflow_dispatch:
    inputs:
      sourceLayerARN:
        description: 'Clone layer from ARN: (find layer ARN from soaking workflow log)'
        required: true
        default: arn:aws:lambda:us-east-1:886273918189:layer:opentelemetry-python-781202490-python:1
      toLayerName:
        description: 'Publish to layer name (ie: aws-otel_python38_ver-1-1-0)'
        required: true
        default: test-1
      regions:
        description: 'Deploy to regions'
        retuired: true
        default: "{\"region\": [ \"us-east-1\", \"us-east-2\", \"us-west-1\", \"us-west-2\", \"ap-south-1\", \"ap-northeast-3\", \"ap-northeast-2\", \"ap-southeast-1\", \"ap-southeast-2\", \"ap-northeast-1\", \"ca-central-1\", \"eu-central-1\", \"eu-west-1\", \"eu-west-2\", \"eu-west-3\", \"eu-north-1\", \"sa-east-1\"]}"

jobs:
  download-layer-from-source:
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.output-test.outputs.test }}
    steps:
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
#          role-duration-seconds: 1200
          aws-region: us-east-1
      - name: Cache layer
        uses: actions/cache@v2
        id: cache-layer
        with:
          path: ./layer.zip
          key: ${{ github.event.inputs.sourceLayerARN }}
      - name: download layer
        run: |
          URL=$(aws lambda get-layer-version-by-arn --arn ${{ github.event.inputs.sourceLayerARN }} --query Content.Location --output text)
          curl $URL -o layer.zip
      - id: output-test
        run: |
          echo "::set-output name=test::hello"

  publish-to-prod:
    runs-on: ubuntu-latest
    needs: download-layer-from-source
    strategy:
      matrix: ${{fromJson(github.event.inputs.regions)}}
    outputs:
      layerARNSS:  ${{ steps.output.output-test.layerarn }}
    steps:
      - name: output-next-test
        run: |
          echo ${{ needs.download-layer-from-source.outputs.output1 }}
          echo ${{ needs.download-layer-from-source.steps.output-step.test }}
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
#          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN_PROD }}
#          role-duration-seconds: 1200
          aws-region: ${{ matrix.region }}
      - name: Cache layer
        uses: actions/cache@v2
        id: cache-layer
        with:
          path: ./layer.zip
          key: ${{ github.event.inputs.sourceLayerARN }}
      - name: source layer missing
        if: steps.cache-layer.outputs.cache-hit != 'true'
        run: |
          exit 1
      - name: publish
        run: |
          BUCKET_NAME=${{ github.event.inputs.toLayerName }}-${{ github.run_id }}-${{ matrix.region }}
          aws s3 mb s3://$BUCKET_NAME
          aws s3 cp layer.zip s3://$BUCKET_NAME
          layerARN=$(aws lambda publish-layer-version --layer-name ${{ github.event.inputs.toLayerName }} --content S3Bucket=$BUCKET_NAME,S3Key=layer.zip --query 'LayerVersionArn' --output text)
          echo $layerARN
          echo "LAYER_ARN=$layerARN" >> $GITHUB_ENV
      - name: public layer
        run: |
          layerVersion=$(aws lambda list-layer-versions --layer-name ${{ github.event.inputs.toLayerName }} --query 'max_by(LayerVersions, &Version).Version')
          aws lambda add-layer-version-permission --layer-name ${{ github.event.inputs.toLayerName }} --version-number $layerVersion --principal "*" --statement-id publish --action lambda:GetLayerVersion
      - name: output
        id: output
        run: |
          echo "::set-output name=layerarn::${{ matrix.region }}"
      - name: clean s3
        if: always()
        run: |
          BUCKET_NAME=${{ github.event.inputs.toLayerName }}-${{ github.run_id }}-${{ matrix.region }}
          aws s3 rb --force s3://$BUCKET_NAME

#  smoke-test:
#    runs-on: ubuntu-latest
#    needs: publish-to-prod
#
  build-layer-md:
    runs-on: ubuntu-latest
    needs: publish-to-prod
    steps:
      - name: test output
        run: |
          echo ${{ needs.publish-to-prod.outputs.layerARNSS }}
